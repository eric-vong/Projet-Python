{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Récupération et traitement des données"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import urllib\n",
    "import geopandas as gpd\n",
    "import bs4 \n",
    "import numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Récupération des données de la mairie de Paris concernant l'encadrement des loyers\n",
    "\n",
    "La mairie de Paris a mis en ligne une base de données concernant l'encadrement des loyers de ses logements en 2019. On y trouve une classification des logements, selon leur secteur de localisation (quartier administratif) et leur type (nombre de pièces, époque de construction, ...), accompagnée de leurs loyers de référence. \n",
    "\n",
    "Lien contenant les informations sur ces données : https://opendata.paris.fr/explore/dataset/logement-encadrement-des-loyers/information/?disjunctive.id_zone&disjunctive.nom_quartier&disjunctive.piece&disjunctive.epoque&disjunctive.meuble_txt&sort=-id_zone&location=15,48.84958,2.34691&basemap=jawg.streets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "donnees_brutes = gpd.read_file('https://opendata.paris.fr/explore/dataset/logement-encadrement-des-loyers/download/?format=geojson&timezone=Europe/Berlin&lang=fr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ville</th>\n",
       "      <th>epoque</th>\n",
       "      <th>meuble_txt</th>\n",
       "      <th>max</th>\n",
       "      <th>min</th>\n",
       "      <th>code_grand_quartier</th>\n",
       "      <th>nom_quartier</th>\n",
       "      <th>id_quartier</th>\n",
       "      <th>piece</th>\n",
       "      <th>ref</th>\n",
       "      <th>annee</th>\n",
       "      <th>id_zone</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PARIS</td>\n",
       "      <td>1946-1970</td>\n",
       "      <td>meublé</td>\n",
       "      <td>30.00</td>\n",
       "      <td>17.50</td>\n",
       "      <td>7512077</td>\n",
       "      <td>Belleville</td>\n",
       "      <td>77</td>\n",
       "      <td>2</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PARIS</td>\n",
       "      <td>Apres 1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>28.32</td>\n",
       "      <td>16.52</td>\n",
       "      <td>7512077</td>\n",
       "      <td>Belleville</td>\n",
       "      <td>77</td>\n",
       "      <td>3</td>\n",
       "      <td>23.6</td>\n",
       "      <td>2020</td>\n",
       "      <td>11</td>\n",
       "      <td>POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PARIS</td>\n",
       "      <td>1971-1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>23.76</td>\n",
       "      <td>13.86</td>\n",
       "      <td>7511976</td>\n",
       "      <td>Combat</td>\n",
       "      <td>76</td>\n",
       "      <td>4</td>\n",
       "      <td>19.8</td>\n",
       "      <td>2020</td>\n",
       "      <td>14</td>\n",
       "      <td>POLYGON ((2.38834 48.88057, 2.38950 48.87955, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PARIS</td>\n",
       "      <td>1946-1970</td>\n",
       "      <td>meublé</td>\n",
       "      <td>25.92</td>\n",
       "      <td>15.12</td>\n",
       "      <td>7511975</td>\n",
       "      <td>Amérique</td>\n",
       "      <td>75</td>\n",
       "      <td>2</td>\n",
       "      <td>21.6</td>\n",
       "      <td>2020</td>\n",
       "      <td>13</td>\n",
       "      <td>POLYGON ((2.40940 48.88019, 2.40995 48.87952, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PARIS</td>\n",
       "      <td>1971-1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>28.80</td>\n",
       "      <td>16.80</td>\n",
       "      <td>7512078</td>\n",
       "      <td>Saint-Fargeau</td>\n",
       "      <td>78</td>\n",
       "      <td>1</td>\n",
       "      <td>24.0</td>\n",
       "      <td>2020</td>\n",
       "      <td>13</td>\n",
       "      <td>POLYGON ((2.41381 48.87081, 2.41383 48.87066, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ville      epoque meuble_txt    max    min  code_grand_quartier  \\\n",
       "0  PARIS   1946-1970     meublé  30.00  17.50              7512077   \n",
       "1  PARIS  Apres 1990     meublé  28.32  16.52              7512077   \n",
       "2  PARIS   1971-1990     meublé  23.76  13.86              7511976   \n",
       "3  PARIS   1946-1970     meublé  25.92  15.12              7511975   \n",
       "4  PARIS   1971-1990     meublé  28.80  16.80              7512078   \n",
       "\n",
       "    nom_quartier  id_quartier  piece   ref  annee  id_zone  \\\n",
       "0     Belleville           77      2  25.0   2020       11   \n",
       "1     Belleville           77      3  23.6   2020       11   \n",
       "2         Combat           76      4  19.8   2020       14   \n",
       "3       Amérique           75      2  21.6   2020       13   \n",
       "4  Saint-Fargeau           78      1  24.0   2020       13   \n",
       "\n",
       "                                            geometry  \n",
       "0  POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...  \n",
       "1  POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...  \n",
       "2  POLYGON ((2.38834 48.88057, 2.38950 48.87955, ...  \n",
       "3  POLYGON ((2.40940 48.88019, 2.40995 48.87952, ...  \n",
       "4  POLYGON ((2.41381 48.87081, 2.41383 48.87066, ...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "donnees_brutes.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On peut ne sélectionner que les colonnes qui nous intérèssent : \n",
    "- `nom_quartier` et `id_quartier` : nom et id du quartier (administratif)\n",
    "- `ref` : loyer de référence (encadrement : `min` et `max`)\n",
    "- `epoque` : époque de construction de l'appartement\n",
    "- `meuble_txt` : location en tant que logement meublé ou non-meublé\n",
    "- `piece` : nombre de pièces\n",
    "- `geometry` : représentation graphique du quartier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "donnees = donnees_brutes[['nom_quartier','id_quartier','ref','min','max','epoque','meuble_txt','piece','geometry']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nom_quartier</th>\n",
       "      <th>id_quartier</th>\n",
       "      <th>ref</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>epoque</th>\n",
       "      <th>meuble_txt</th>\n",
       "      <th>piece</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Belleville</td>\n",
       "      <td>77</td>\n",
       "      <td>25.0</td>\n",
       "      <td>17.50</td>\n",
       "      <td>30.00</td>\n",
       "      <td>1946-1970</td>\n",
       "      <td>meublé</td>\n",
       "      <td>2</td>\n",
       "      <td>POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Belleville</td>\n",
       "      <td>77</td>\n",
       "      <td>23.6</td>\n",
       "      <td>16.52</td>\n",
       "      <td>28.32</td>\n",
       "      <td>Apres 1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>3</td>\n",
       "      <td>POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Combat</td>\n",
       "      <td>76</td>\n",
       "      <td>19.8</td>\n",
       "      <td>13.86</td>\n",
       "      <td>23.76</td>\n",
       "      <td>1971-1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>4</td>\n",
       "      <td>POLYGON ((2.38834 48.88057, 2.38950 48.87955, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Amérique</td>\n",
       "      <td>75</td>\n",
       "      <td>21.6</td>\n",
       "      <td>15.12</td>\n",
       "      <td>25.92</td>\n",
       "      <td>1946-1970</td>\n",
       "      <td>meublé</td>\n",
       "      <td>2</td>\n",
       "      <td>POLYGON ((2.40940 48.88019, 2.40995 48.87952, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Saint-Fargeau</td>\n",
       "      <td>78</td>\n",
       "      <td>24.0</td>\n",
       "      <td>16.80</td>\n",
       "      <td>28.80</td>\n",
       "      <td>1971-1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>1</td>\n",
       "      <td>POLYGON ((2.41381 48.87081, 2.41383 48.87066, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    nom_quartier  id_quartier   ref    min    max      epoque meuble_txt  \\\n",
       "0     Belleville           77  25.0  17.50  30.00   1946-1970     meublé   \n",
       "1     Belleville           77  23.6  16.52  28.32  Apres 1990     meublé   \n",
       "2         Combat           76  19.8  13.86  23.76   1971-1990     meublé   \n",
       "3       Amérique           75  21.6  15.12  25.92   1946-1970     meublé   \n",
       "4  Saint-Fargeau           78  24.0  16.80  28.80   1971-1990     meublé   \n",
       "\n",
       "   piece                                           geometry  \n",
       "0      2  POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...  \n",
       "1      3  POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...  \n",
       "2      4  POLYGON ((2.38834 48.88057, 2.38950 48.87955, ...  \n",
       "3      2  POLYGON ((2.40940 48.88019, 2.40995 48.87952, ...  \n",
       "4      1  POLYGON ((2.41381 48.87081, 2.41383 48.87066, ...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "donnees.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cette base de données référence 2560 appartements. On constate qu'il n'y a pas de valeurs manquantes :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "nom_quartier    2560\n",
       "id_quartier     2560\n",
       "ref             2560\n",
       "min             2560\n",
       "max             2560\n",
       "epoque          2560\n",
       "meuble_txt      2560\n",
       "piece           2560\n",
       "geometry        2560\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "donnees.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Enrichissement des données : stations de métro\n",
    "\n",
    "Pour enrichir ces données et mieux comprendre l'effet du quartier sur le loyer d'un logement, on peut essayer de compter le nombre de stations de métro de chaque quartier. \n",
    "\n",
    "Pour cela, on commence par créer une base de données recensant la position de chaque station de métro parisienne par web scraping. On utilise le listing des stations de métro de Wikipédia (https://fr.wikipedia.org/wiki/Liste_des_stations_du_m%C3%A9tro_de_Paris) et on va successivement sur les pages des stations de métro pour récupérer leurs coordonnées géographiques."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fonction pour transformer les coordonnées récoltées (sous format DMS nord-est) en format DD :\n",
    "\n",
    "dd = lambda d,m,s : float(d) + float(m)/60 + float(s)/(60*60)\n",
    "def dms_to_dd (dms):\n",
    "    parts = re.split('[^\\d\\w]+', dms)\n",
    "    lat = dd(parts[0], parts[1], parts[2])\n",
    "    lng = dd(parts[4], parts[5], parts[6])\n",
    "    return (lat, lng)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48° 53′ 04″ nord, 2° 20′ 19″ est 48.88444444444444 2.338611111111111\n",
      "48° 49′ 42″ nord, 2° 19′ 36″ est 48.82833333333333 2.326666666666666\n",
      "48° 51′ 22″ nord, 2° 23′ 42″ est 48.85611111111111 2.395\n",
      "48° 51′ 54″ nord, 2° 18′ 01″ est 48.865 2.3002777777777776\n",
      "48° 53′ 31″ nord, 2° 17′ 08″ est 48.89194444444444 2.2855555555555553\n",
      "48° 52′ 59″ nord, 2° 20′ 41″ est 48.88305555555556 2.3447222222222224\n",
      "48° 52′ 32″ nord, 2° 17′ 22″ est 48.87555555555556 2.2894444444444444\n",
      "48° 51′ 56″ nord, 2° 21′ 22″ est 48.86555555555556 2.3561111111111113\n",
      "48° 51′ 38″ nord, 2° 19′ 16″ est 48.86055555555556 2.3211111111111107\n",
      "48° 54′ 14″ nord, 2° 23′ 33″ est 48.903888888888886 2.3925\n",
      "48° 50′ 49″ nord, 2° 17′ 40″ est 48.846944444444446 2.2944444444444443\n",
      "48° 51′ 07″ nord, 2° 23′ 52″ est 48.85194444444445 2.397777777777778\n",
      "48° 50′ 11″ nord, 2° 16′ 42″ est 48.83638888888889 2.2783333333333333\n",
      "48° 53′ 01″ nord, 2° 21′ 02″ est 48.88361111111111 2.3505555555555557\n",
      "48° 56′ 17″ nord, 2° 21′ 39″ est 48.93805555555555 2.3608333333333333\n",
      "48° 51′ 11″ nord, 2° 22′ 09″ est 48.85305555555556 2.3691666666666666\n",
      "48° 50′ 29″ nord, 2° 24′ 03″ est 48.84138888888889 2.4008333333333334\n",
      "48° 52′ 19″ nord, 2° 22′ 37″ est 48.871944444444445 2.3769444444444443\n",
      "48° 50′ 43″ nord, 2° 25′ 45″ est 48.84527777777778 2.4291666666666667\n",
      "48° 50′ 26″ nord, 2° 22′ 46″ est 48.84055555555556 2.3794444444444447\n",
      "48° 49′ 47″ nord, 2° 22′ 34″ est 48.82972222222222 2.3761111111111113\n",
      "48° 49′ 56″ nord, 2° 14′ 17″ est 48.83222222222223 2.2380555555555555\n",
      "48° 51′ 14″ nord, 2° 17′ 22″ est 48.85388888888889 2.2894444444444444\n",
      "48° 53′ 00″ nord, 2° 20′ 01″ est 48.88333333333333 2.3336111111111113\n",
      "48° 54′ 24″ nord, 2° 27′ 00″ est 48.906666666666666 2.45\n",
      "48° 53′ 43″ nord, 2° 25′ 30″ est 48.89527777777778 2.425\n",
      "48° 52′ 03″ nord, 2° 17′ 25″ est 48.8675 2.290277777777778\n",
      "48° 52′ 50″ nord, 2° 22′ 30″ est 48.88055555555555 2.375\n",
      "48° 52′ 14″ nord, 2° 20′ 56″ est 48.870555555555555 2.3488888888888892\n",
      "48° 52′ 46″ nord, 2° 23′ 17″ est 48.879444444444445 2.3880555555555554\n",
      "48° 50′ 28″ nord, 2° 17′ 16″ est 48.84111111111111 2.2877777777777775\n",
      "48° 50′ 32″ nord, 2° 14′ 20″ est 48.842222222222226 2.238888888888889\n",
      "48° 50′ 26″ nord, 2° 13′ 42″ est 48.84055555555556 2.2283333333333335\n",
      "48° 52′ 07″ nord, 2° 20′ 29″ est 48.868611111111115 2.341388888888889\n",
      "48° 51′ 22″ nord, 2° 22′ 12″ est 48.85611111111111 2.37\n",
      "48° 53′ 27″ nord, 2° 19′ 11″ est 48.89083333333333 2.319722222222222\n",
      "48° 52′ 43″ nord, 2° 22′ 54″ est 48.87861111111111 2.381666666666667\n",
      "48° 51′ 07″ nord, 2° 24′ 07″ est 48.85194444444445 2.401944444444444\n",
      "48° 52′ 34″ nord, 2° 20′ 42″ est 48.876111111111115 2.345\n",
      "48° 50′ 51″ nord, 2° 18′ 11″ est 48.847500000000004 2.3030555555555554\n",
      "48° 50′ 06″ nord, 2° 21′ 29″ est 48.835 2.3580555555555556\n",
      "48° 50′ 50″ nord, 2° 21′ 04″ est 48.84722222222222 2.3511111111111114\n",
      "48° 55′ 12″ nord, 2° 20′ 38″ est 48.919999999999995 2.343888888888889\n",
      "48° 50′ 26″ nord, 2° 21′ 06″ est 48.84055555555556 2.3516666666666666\n",
      "48° 52′ 03″ nord, 2° 18′ 50″ est 48.8675 2.3138888888888887\n",
      "48° 50′ 42″ nord, 2° 15′ 58″ est 48.845 2.266111111111111\n",
      "48° 49′ 17″ nord, 2° 24′ 50″ est 48.82138888888889 2.4138888888888888\n",
      "48° 52′ 28″ nord, 2° 17′ 45″ est 48.87444444444444 2.2958333333333334\n",
      "48° 50′ 48″ nord, 2° 17′ 13″ est 48.84666666666667 2.2869444444444444\n",
      "48° 51′ 18″ nord, 2° 23′ 05″ est 48.855000000000004 2.3847222222222224\n",
      "48° 52′ 22″ nord, 2° 21′ 22″ est 48.87277777777778 2.3561111111111113\n",
      "48° 50′ 40″ nord, 2° 26′ 22″ est 48.84444444444445 2.4394444444444447\n",
      "48° 52′ 42″ nord, 2° 21′ 43″ est 48.87833333333333 2.3619444444444446\n",
      "48° 53′ 12″ nord, 2° 20′ 58″ est 48.88666666666666 2.3494444444444444\n",
      "48° 51′ 31″ nord, 2° 20′ 50″ est 48.85861111111111 2.3472222222222223\n",
      "48° 48′ 38″ nord, 2° 18′ 07″ est 48.81055555555555 2.301944444444444\n",
      "48° 52′ 23″ nord, 2° 20′ 02″ est 48.87305555555555 2.333888888888889\n",
      "48° 51′ 24″ nord, 2° 22′ 06″ est 48.85666666666667 2.368333333333333\n",
      "48° 50′ 06″ nord, 2° 22′ 05″ est 48.835 2.368055555555556\n",
      "48° 51′ 18″ nord, 2° 20′ 48″ est 48.855000000000004 2.3466666666666667\n",
      "48° 51′ 04″ nord, 2° 20′ 39″ est 48.85111111111111 2.3441666666666667\n",
      "48° 52′ 38″ nord, 2° 22′ 16″ est 48.87722222222222 2.371111111111111\n",
      "48° 50′ 42″ nord, 2° 17′ 39″ est 48.845 2.2941666666666665\n",
      "48° 51′ 58″ nord, 2° 19′ 21″ est 48.86611111111111 2.3225\n",
      "48° 50′ 15″ nord, 2° 17′ 48″ est 48.837500000000006 2.2966666666666664\n",
      "48° 53′ 41″ nord, 2° 22′ 56″ est 48.89472222222222 2.3822222222222225\n",
      "48° 49′ 37″ nord, 2° 16′ 44″ est 48.82694444444445 2.278888888888889\n",
      "48° 49′ 47″ nord, 2° 21′ 02″ est 48.82972222222222 2.3505555555555557\n",
      "48° 50′ 00″ nord, 2° 23′ 12″ est 48.833333333333336 2.3866666666666667\n",
      "48° 52′ 46″ nord, 2° 18′ 16″ est 48.879444444444445 2.304444444444444\n",
      "48° 52′ 10″ nord, 2° 22′ 47″ est 48.86944444444445 2.379722222222222\n",
      "48° 47′ 45″ nord, 2° 26′ 58″ est 48.795833333333334 2.4494444444444445\n",
      "48° 46′ 47″ nord, 2° 27′ 34″ est 48.77972222222222 2.4594444444444448\n",
      "48° 47′ 23″ nord, 2° 27′ 03″ est 48.78972222222222 2.4508333333333336\n",
      "48° 53′ 29″ nord, 2° 22′ 39″ est 48.89138888888889 2.3775\n",
      "48° 51′ 29″ nord, 2° 26′ 09″ est 48.85805555555556 2.4358333333333335\n",
      "48° 52′ 55″ nord, 2° 23′ 39″ est 48.88194444444444 2.3941666666666666\n",
      "48° 50′ 23″ nord, 2° 23′ 45″ est 48.83972222222222 2.3958333333333335\n",
      "48° 50′ 02″ nord, 2° 19′ 58″ est 48.83388888888889 2.3327777777777774\n",
      "48° 50′ 21″ nord, 2° 23′ 24″ est 48.83916666666667 2.39\n",
      "48° 51′ 01″ nord, 2° 17′ 37″ est 48.85027777777778 2.293611111111111\n",
      "48° 50′ 49″ nord, 2° 18′ 59″ est 48.846944444444446 2.3163888888888886\n",
      "48° 51′ 18″ nord, 2° 18′ 24″ est 48.855000000000004 2.3066666666666666\n",
      "48° 48′ 55″ nord, 2° 25′ 19″ est 48.81527777777777 2.4219444444444442\n",
      "48° 50′ 28″ nord, 2° 19′ 30″ est 48.84111111111111 2.3249999999999997\n",
      "48° 50′ 50″ nord, 2° 16′ 08″ est 48.84722222222222 2.2688888888888887\n",
      "48° 53′ 37″ nord, 2° 24′ 47″ est 48.89361111111111 2.4130555555555553\n",
      "48° 53′ 16″ nord, 2° 15′ 02″ est 48.88777777777778 2.2505555555555556\n",
      "48° 51′ 51″ nord, 2° 21′ 02″ est 48.86416666666667 2.3505555555555557\n",
      "48° 52′ 44″ nord, 2° 19′ 21″ est 48.87888888888889 2.3225\n",
      "48° 50′ 33″ nord, 2° 15′ 34″ est 48.8425 2.2594444444444446\n",
      "48° 51′ 01″ nord, 2° 23′ 00″ est 48.85027777777778 2.3833333333333333\n",
      "48° 50′ 40″ nord, 2° 19′ 05″ est 48.84444444444445 2.3180555555555555\n",
      "48° 50′ 32″ nord, 2° 17′ 28″ est 48.842222222222226 2.291111111111111\n",
      "48° 51′ 51″ nord, 2° 21′ 58″ est 48.86416666666667 2.366111111111111\n",
      "48° 54′ 51″ nord, 2° 24′ 14″ est 48.91416666666667 2.403888888888889\n",
      "48° 52′ 09″ nord, 2° 18′ 30″ est 48.869166666666665 2.308333333333333\n",
      "48° 54′ 25″ nord, 2° 21′ 57″ est 48.90694444444444 2.3658333333333332\n",
      "48° 55′ 00″ nord, 2° 17′ 40″ est 48.916666666666664 2.2944444444444443\n",
      "48° 50′ 19″ nord, 2° 19′ 21″ est 48.83861111111111 2.3225\n",
      "48° 51′ 54″ nord, 2° 25′ 00″ est 48.865 2.4166666666666665\n",
      "48° 51′ 54″ nord, 2° 23′ 54″ est 48.865 2.3983333333333334\n",
      "48° 50′ 33″ nord, 2° 21′ 54″ est 48.8425 2.365\n",
      "48° 52′ 34″ nord, 2° 21′ 30″ est 48.876111111111115 2.3583333333333334\n",
      "48° 50′ 41″ nord, 2° 22′ 27″ est 48.844722222222224 2.3741666666666665\n",
      "48° 52′ 50″ nord, 2° 21′ 18″ est 48.88055555555555 2.355\n",
      "48° 54′ 23″ nord, 2° 19′ 55″ est 48.906388888888884 2.3319444444444444\n",
      "48° 52′ 19″ nord, 2° 18′ 02″ est 48.871944444444445 2.3005555555555555\n",
      "48° 49′ 52″ nord, 2° 20′ 36″ est 48.83111111111111 2.3433333333333333\n",
      "48° 52′ 11″ nord, 2° 22′ 14″ est 48.86972222222222 2.3705555555555557\n",
      "48° 52′ 17″ nord, 2° 20′ 40″ est 48.87138888888889 2.3444444444444446\n",
      "48° 53′ 32″ nord, 2° 19′ 38″ est 48.89222222222222 2.327222222222222\n",
      "48° 52′ 25″ nord, 2° 19′ 42″ est 48.87361111111111 2.328333333333333\n",
      "48° 53′ 29″ nord, 2° 24′ 11″ est 48.89138888888889 2.4030555555555555\n",
      "48° 51′ 24″ nord, 2° 21′ 05″ est 48.85666666666667 2.351388888888889\n",
      "48° 51′ 52″ nord, 2° 17′ 36″ est 48.864444444444445 2.293333333333333\n",
      "48° 51′ 39″ nord, 2° 18′ 52″ est 48.86083333333333 2.3144444444444443\n",
      "48° 52′ 16″ nord, 2° 21′ 38″ est 48.87111111111111 2.3605555555555555\n",
      "48° 51′ 07″ nord, 2° 16′ 04″ est 48.85194444444445 2.267777777777778\n",
      "48° 52′ 54″ nord, 2° 22′ 13″ est 48.88166666666667 2.370277777777778\n",
      "48° 50′ 46″ nord, 2° 16′ 43″ est 48.846111111111114 2.278611111111111\n",
      "48° 52′ 31″ nord, 2° 23′ 22″ est 48.875277777777775 2.3894444444444445\n",
      "48° 53′ 33″ nord, 2° 20′ 41″ est 48.8925 2.3447222222222224\n",
      "48° 50′ 46″ nord, 2° 21′ 21″ est 48.846111111111114 2.3558333333333334\n",
      "48° 52′ 16″ nord, 2° 17′ 35″ est 48.87111111111111 2.2930555555555556\n",
      "48° 53′ 04″ nord, 2° 21′ 37″ est 48.88444444444444 2.3602777777777777\n",
      "48° 55′ 15″ nord, 2° 24′ 38″ est 48.920833333333334 2.4105555555555553\n",
      "48° 53′ 31″ nord, 2° 14′ 16″ est 48.89194444444444 2.2377777777777776\n",
      "48° 53′ 13″ nord, 2° 19′ 33″ est 48.886944444444445 2.325833333333333\n",
      "48° 50′ 57″ nord, 2° 17′ 53″ est 48.84916666666667 2.2980555555555555\n",
      "48° 51′ 28″ nord, 2° 16′ 25″ est 48.85777777777778 2.2736111111111112\n",
      "48° 51′ 28″ nord, 2° 18′ 37″ est 48.85777777777778 2.3102777777777774\n",
      "48° 53′ 23″ nord, 2° 20′ 19″ est 48.88972222222222 2.338611111111111\n",
      "48° 53′ 06″ nord, 2° 22′ 43″ est 48.885 2.3786111111111112\n",
      "48° 48′ 37″ nord, 2° 21′ 43″ est 48.81027777777778 2.3619444444444446\n",
      "48° 52′ 29″ nord, 2° 20′ 22″ est 48.874722222222225 2.3394444444444447\n",
      "48° 51′ 05″ nord, 2° 22′ 34″ est 48.85138888888889 2.3761111111111113\n",
      "48° 55′ 23″ nord, 2° 17′ 09″ est 48.92305555555555 2.285833333333333\n",
      "48° 55′ 50″ nord, 2° 17′ 02″ est 48.93055555555555 2.283888888888889\n",
      "48° 50′ 11″ nord, 2° 21′ 08″ est 48.83638888888889 2.352222222222222\n",
      "48° 51′ 45″ nord, 2° 20′ 45″ est 48.862500000000004 2.3458333333333337\n",
      "48° 52′ 51″ nord, 2° 16′ 21″ est 48.880833333333335 2.2725\n",
      "48° 49′ 33″ nord, 2° 24′ 25″ est 48.825833333333335 2.4069444444444446\n",
      "48° 52′ 47″ nord, 2° 19′ 37″ est 48.87972222222222 2.326944444444444\n",
      "48° 52′ 52″ nord, 2° 21′ 53″ est 48.88111111111111 2.3647222222222224\n",
      "48° 53′ 20″ nord, 2° 17′ 17″ est 48.888888888888886 2.2880555555555553\n",
      "48° 50′ 19″ nord, 2° 16′ 55″ est 48.83861111111111 2.2819444444444446\n",
      "48° 51′ 40″ nord, 2° 20′ 25″ est 48.861111111111114 2.340277777777778\n",
      "48° 51′ 10″ nord, 2° 20′ 07″ est 48.85277777777778 2.335277777777778\n",
      "48° 52′ 12″ nord, 2° 19′ 31″ est 48.87 2.3252777777777776\n",
      "48° 49′ 27″ nord, 2° 16′ 24″ est 48.82416666666667 2.2733333333333334\n",
      "48° 48′ 40″ nord, 2° 23′ 00″ est 48.81111111111111 2.3833333333333333\n",
      "48° 54′ 14″ nord, 2° 18′ 19″ est 48.903888888888886 2.3052777777777775\n",
      "48° 51′ 44″ nord, 2° 26′ 31″ est 48.86222222222222 2.4419444444444447\n",
      "48° 49′ 05″ nord, 2° 19′ 10″ est 48.81805555555556 2.319444444444444\n",
      "48° 54′ 42″ nord, 2° 20′ 02″ est 48.91166666666666 2.333888888888889\n",
      "48° 52′ 47″ nord, 2° 24′ 59″ est 48.87972222222222 2.4163888888888887\n",
      "48° 49′ 20″ nord, 2° 21′ 31″ est 48.82222222222222 2.358611111111111\n",
      "48° 48′ 09″ nord, 2° 26′ 47″ est 48.802499999999995 2.446388888888889\n",
      "48° 48′ 31″ nord, 2° 26′ 10″ est 48.808611111111105 2.4361111111111113\n",
      "48° 49′ 21″ nord, 2° 17′ 55″ est 48.822500000000005 2.298611111111111\n",
      "48° 48′ 53″ nord, 2° 17′ 50″ est 48.81472222222222 2.297222222222222\n",
      "48° 52′ 57″ nord, 2° 18′ 40″ est 48.8825 2.311111111111111\n",
      "48° 51′ 10″ nord, 2° 24′ 25″ est 48.85277777777778 2.4069444444444446\n",
      "48° 53′ 25″ nord, 2° 21′ 00″ est 48.890277777777776 2.35\n",
      "48° 50′ 01″ nord, 2° 14′ 37″ est 48.83361111111111 2.243611111111111\n",
      "48° 53′ 26″ nord, 2° 21′ 36″ est 48.89055555555556 2.36\n",
      "48° 51′ 01″ nord, 2° 20′ 53″ est 48.85027777777778 2.348055555555556\n",
      "48° 51′ 58″ nord, 2° 23′ 01″ est 48.86611111111111 2.383611111111111\n",
      "48° 50′ 15″ nord, 2° 24′ 04″ est 48.837500000000006 2.401111111111111\n",
      "48° 50′ 52″ nord, 2° 15′ 50″ est 48.84777777777778 2.263888888888889\n",
      "48° 50′ 42″ nord, 2° 15′ 40″ est 48.845 2.261111111111111\n",
      "48° 50′ 48″ nord, 2° 16′ 18″ est 48.84666666666667 2.2716666666666665\n",
      "48° 52′ 25″ nord, 2° 18′ 52″ est 48.87361111111111 2.3144444444444443\n",
      "48° 52′ 49″ nord, 2° 18′ 31″ est 48.88027777777778 2.308611111111111\n",
      "48° 50′ 39″ nord, 2° 23′ 24″ est 48.844166666666666 2.39\n",
      "48° 50′ 36″ nord, 2° 19′ 23″ est 48.843333333333334 2.3230555555555554\n",
      "48° 49′ 53″ nord, 2° 19′ 48″ est 48.831388888888895 2.3299999999999996\n",
      "48° 50′ 54″ nord, 2° 23′ 45″ est 48.848333333333336 2.3958333333333335\n",
      "48° 49′ 59″ nord, 2° 21′ 46″ est 48.83305555555556 2.362777777777778\n",
      "48° 52′ 34″ nord, 2° 20′ 19″ est 48.876111111111115 2.338611111111111\n",
      "48° 50′ 40″ nord, 2° 19′ 44″ est 48.84444444444445 2.328888888888889\n",
      "48° 51′ 52″ nord, 2° 22′ 08″ est 48.864444444444445 2.368888888888889\n",
      "48° 51′ 07″ nord, 2° 20′ 20″ est 48.85194444444445 2.338888888888889\n",
      "48° 49′ 37″ nord, 2° 21′ 59″ est 48.82694444444445 2.366388888888889\n",
      "48° 52′ 14″ nord, 2° 19′ 56″ est 48.870555555555555 2.332222222222222\n",
      "48° 53′ 13″ nord, 2° 23′ 09″ est 48.886944444444445 2.3858333333333333\n",
      "48° 51′ 46″ nord, 2° 20′ 09″ est 48.86277777777778 2.3358333333333334\n",
      "48° 51′ 55″ nord, 2° 22′ 28″ est 48.86527777777778 2.3744444444444444\n",
      "48° 51′ 27″ nord, 2° 17′ 09″ est 48.8575 2.285833333333333\n",
      "48° 50′ 34″ nord, 2° 18′ 46″ est 48.84277777777778 2.312777777777778\n",
      "48° 52′ 07″ nord, 2° 24′ 06″ est 48.868611111111115 2.4016666666666664\n",
      "48° 51′ 47″ nord, 2° 23′ 15″ est 48.863055555555555 2.3875\n",
      "48° 53′ 05″ nord, 2° 17′ 57″ est 48.88472222222222 2.2991666666666664\n",
      "48° 50′ 03″ nord, 2° 19′ 07″ est 48.83416666666667 2.3186111111111107\n",
      "48° 51′ 29″ nord, 2° 23′ 27″ est 48.85805555555556 2.390833333333333\n",
      "48° 50′ 43″ nord, 2° 24′ 02″ est 48.84527777777778 2.4005555555555556\n",
      "48° 48′ 57″ nord, 2° 22′ 39″ est 48.81583333333333 2.3775\n",
      "48° 52′ 56″ nord, 2° 20′ 15″ est 48.882222222222225 2.3375000000000004\n",
      "48° 49′ 53″ nord, 2° 21′ 20″ est 48.831388888888895 2.3555555555555556\n",
      "48° 53′ 02″ nord, 2° 19′ 39″ est 48.88388888888889 2.3274999999999997\n",
      "48° 52′ 37″ nord, 2° 23′ 35″ est 48.87694444444445 2.3930555555555557\n",
      "48° 50′ 37″ nord, 2° 21′ 08″ est 48.843611111111116 2.352222222222222\n",
      "48° 49′ 54″ nord, 2° 18′ 49″ est 48.83166666666667 2.313611111111111\n",
      "48° 46′ 08″ nord, 2° 27′ 53″ est 48.76888888888889 2.4647222222222225\n",
      "48° 52′ 37″ nord, 2° 20′ 54″ est 48.87694444444445 2.3483333333333336\n",
      "48° 53′ 50″ nord, 2° 16′ 51″ est 48.89722222222222 2.2808333333333333\n",
      "48° 53′ 04″ nord, 2° 15′ 36″ est 48.88444444444444 2.26\n",
      "48° 49′ 47″ nord, 2° 13′ 52″ est 48.82972222222222 2.2311111111111113\n",
      "48° 51′ 12″ nord, 2° 21′ 27″ est 48.85333333333333 2.3575\n",
      "48° 51′ 31″ nord, 2° 20′ 29″ est 48.85861111111111 2.341388888888889\n",
      "48° 52′ 18″ nord, 2° 16′ 36″ est 48.87166666666667 2.2766666666666664\n",
      "48° 50′ 53″ nord, 2° 15′ 32″ est 48.84805555555556 2.258888888888889\n",
      "48° 51′ 52″ nord, 2° 24′ 26″ est 48.864444444444445 2.407222222222222\n",
      "48° 53′ 09″ nord, 2° 17′ 37″ est 48.88583333333333 2.293611111111111\n",
      "48° 49′ 58″ nord, 2° 24′ 01″ est 48.83277777777778 2.4002777777777777\n",
      "48° 49′ 13″ nord, 2° 21′ 55″ est 48.82027777777778 2.365277777777778\n",
      "48° 53′ 40″ nord, 2° 18′ 49″ est 48.894444444444446 2.313611111111111\n",
      "48° 53′ 50″ nord, 2° 20′ 41″ est 48.89722222222222 2.3447222222222224\n",
      "48° 53′ 50″ nord, 2° 21′ 33″ est 48.89722222222222 2.359166666666667\n",
      "48° 53′ 50″ nord, 2° 23′ 09″ est 48.89722222222222 2.3858333333333333\n",
      "48° 51′ 14″ nord, 2° 24′ 44″ est 48.85388888888889 2.4122222222222223\n",
      "48° 53′ 18″ nord, 2° 23′ 31″ est 48.888333333333335 2.3919444444444444\n",
      "48° 50′ 17″ nord, 2° 15′ 25″ est 48.838055555555556 2.2569444444444446\n",
      "48° 53′ 48″ nord, 2° 19′ 43″ est 48.89666666666667 2.328611111111111\n",
      "48° 49′ 41″ nord, 2° 18′ 21″ est 48.82805555555556 2.305833333333333\n",
      "48° 49′ 56″ nord, 2° 17′ 16″ est 48.83222222222223 2.2877777777777775\n",
      "48° 50′ 50″ nord, 2° 24′ 32″ est 48.84722222222222 2.408888888888889\n",
      "48° 52′ 38″ nord, 2° 24′ 24″ est 48.87722222222222 2.4066666666666667\n",
      "48° 49′ 09″ nord, 2° 21′ 39″ est 48.81916666666667 2.3608333333333333\n",
      "48° 49′ 15″ nord, 2° 22′ 14″ est 48.82083333333334 2.3705555555555557\n",
      "48° 50′ 08″ nord, 2° 24′ 22″ est 48.83555555555556 2.406111111111111\n",
      "48° 49′ 23″ nord, 2° 19′ 31″ est 48.823055555555555 2.3252777777777776\n",
      "48° 52′ 41″ nord, 2° 16′ 55″ est 48.878055555555555 2.2819444444444446\n",
      "48° 52′ 49″ nord, 2° 23′ 56″ est 48.88027777777778 2.398888888888889\n",
      "48° 52′ 01″ nord, 2° 20′ 01″ est 48.86694444444444 2.3336111111111113\n",
      "48° 52′ 26″ nord, 2° 23′ 07″ est 48.87388888888889 2.3852777777777776\n",
      "48° 50′ 13″ nord, 2° 22′ 22″ est 48.83694444444445 2.372777777777778\n",
      "48° 50′ 48″ nord, 2° 21′ 57″ est 48.84666666666667 2.3658333333333332\n",
      "48° 52′ 10″ nord, 2° 20′ 12″ est 48.86944444444445 2.336666666666667\n",
      "48° 51′ 43″ nord, 2° 21′ 14″ est 48.86194444444445 2.353888888888889\n",
      "48° 51′ 18″ nord, 2° 16′ 11″ est 48.855000000000004 2.269722222222222\n",
      "48° 50′ 21″ nord, 2° 19′ 50″ est 48.83916666666667 2.3305555555555553\n",
      "48° 51′ 58″ nord, 2° 21′ 09″ est 48.86611111111111 2.3525\n",
      "48° 50′ 53″ nord, 2° 19′ 40″ est 48.84805555555556 2.3277777777777775\n",
      "48° 52′ 03″ nord, 2° 21′ 50″ est 48.8675 2.363888888888889\n",
      "48° 50′ 50″ nord, 2° 23′ 12″ est 48.84722222222222 2.3866666666666667\n",
      "48° 51′ 35″ nord, 2° 22′ 19″ est 48.859722222222224 2.3719444444444444\n",
      "48° 52′ 19″ nord, 2° 20′ 19″ est 48.871944444444445 2.338611111111111\n",
      "48° 53′ 16″ nord, 2° 22′ 25″ est 48.88777777777778 2.3736111111111113\n",
      "48° 51′ 20″ nord, 2° 25′ 25″ est 48.855555555555554 2.423611111111111\n",
      "48° 52′ 57″ nord, 2° 19′ 19″ est 48.8825 2.321944444444444\n",
      "48° 51′ 50″ nord, 2° 16′ 45″ est 48.86388888888889 2.279166666666667\n",
      "48° 51′ 07″ nord, 2° 23′ 25″ est 48.85194444444445 2.390277777777778\n",
      "48° 51′ 20″ nord, 2° 19′ 32″ est 48.855555555555554 2.3255555555555554\n",
      "48° 51′ 52″ nord, 2° 22′ 46″ est 48.864444444444445 2.3794444444444447\n",
      "48° 51′ 41″ nord, 2° 22′ 27″ est 48.86138888888889 2.3741666666666665\n",
      "48° 52′ 28″ nord, 2° 19′ 20″ est 48.87444444444444 2.322222222222222\n",
      "48° 55′ 49″ nord, 2° 21′ 28″ est 48.930277777777775 2.3577777777777778\n",
      "48° 56′ 45″ nord, 2° 21′ 49″ est 48.94583333333333 2.363611111111111\n",
      "48° 52′ 19″ nord, 2° 24′ 16″ est 48.871944444444445 2.404444444444444\n",
      "48° 51′ 07″ nord, 2° 18′ 52″ est 48.85194444444445 2.3144444444444443\n",
      "48° 52′ 42″ nord, 2° 20′ 15″ est 48.87833333333333 2.3375000000000004\n",
      "48° 51′ 14″ nord, 2° 20′ 00″ est 48.85388888888889 2.3333333333333335\n",
      "48° 49′ 58″ nord, 2° 20′ 13″ est 48.83277777777778 2.3369444444444447\n",
      "48° 52′ 32″ nord, 2° 19′ 34″ est 48.87555555555556 2.326111111111111\n",
      "48° 50′ 47″ nord, 2° 25′ 07″ est 48.84638888888889 2.418611111111111\n",
      "48° 50′ 17″ nord, 2° 21′ 37″ est 48.838055555555556 2.3602777777777777\n",
      "48° 51′ 13″ nord, 2° 20′ 38″ est 48.853611111111114 2.343888888888889\n",
      "48° 51′ 19″ nord, 2° 21′ 38″ est 48.85527777777778 2.3605555555555555\n",
      "48° 52′ 19″ nord, 2° 18′ 36″ est 48.871944444444445 2.3099999999999996\n",
      "48° 50′ 49″ nord, 2° 19′ 37″ est 48.846944444444446 2.326944444444444\n",
      "48° 51′ 38″ nord, 2° 22′ 02″ est 48.86055555555556 2.3672222222222223\n",
      "48° 51′ 03″ nord, 2° 19′ 50″ est 48.850833333333334 2.3305555555555553\n",
      "48° 50′ 51″ nord, 2° 18′ 25″ est 48.847500000000004 2.3069444444444445\n",
      "48° 52′ 03″ nord, 2° 20′ 47″ est 48.8675 2.346388888888889\n",
      "48° 51′ 05″ nord, 2° 19′ 36″ est 48.85138888888889 2.326666666666666\n",
      "48° 50′ 44″ nord, 2° 18′ 34″ est 48.845555555555556 2.3094444444444444\n",
      "48° 53′ 41″ nord, 2° 20′ 50″ est 48.89472222222222 2.3472222222222223\n",
      "48° 51′ 30″ nord, 2° 19′ 24″ est 48.858333333333334 2.3233333333333333\n",
      "48° 53′ 03″ nord, 2° 21′ 57″ est 48.884166666666665 2.3658333333333332\n",
      "48° 52′ 11″ nord, 2° 21′ 14″ est 48.86972222222222 2.353888888888889\n",
      "48° 51′ 05″ nord, 2° 21′ 43″ est 48.85138888888889 2.3619444444444446\n",
      "48° 52′ 32″ nord, 2° 23′ 54″ est 48.87555555555556 2.3983333333333334\n",
      "48° 51′ 59″ nord, 2° 21′ 38″ est 48.86638888888889 2.3605555555555555\n",
      "48° 52′ 41″ nord, 2° 17′ 55″ est 48.878055555555555 2.298611111111111\n",
      "48° 49′ 36″ nord, 2° 21′ 28″ est 48.82666666666667 2.3577777777777778\n",
      "48° 52′ 35″ nord, 2° 20′ 00″ est 48.87638888888889 2.3333333333333335\n",
      "48° 51′ 48″ nord, 2° 17′ 13″ est 48.86333333333334 2.2869444444444444\n",
      "48° 51′ 52″ nord, 2° 19′ 49″ est 48.864444444444445 2.3302777777777774\n",
      "48° 50′ 56″ nord, 2° 19′ 16″ est 48.848888888888894 2.3211111111111107\n",
      "48° 51′ 22″ nord, 2° 18′ 54″ est 48.85611111111111 2.315\n",
      "48° 50′ 23″ nord, 2° 18′ 05″ est 48.83972222222222 2.301388888888889\n",
      "48° 50′ 32″ nord, 2° 19′ 44″ est 48.842222222222226 2.328888888888889\n",
      "48° 52′ 11″ nord, 2° 17′ 07″ est 48.86972222222222 2.2852777777777775\n",
      "48° 48′ 14″ nord, 2° 21′ 50″ est 48.803888888888885 2.363888888888889\n",
      "48° 47′ 14″ nord, 2° 22′ 03″ est 48.78722222222222 2.3675\n",
      "48° 47′ 46″ nord, 2° 22′ 06″ est 48.79611111111111 2.368333333333333\n",
      "48° 52′ 52″ nord, 2° 18′ 54″ est 48.88111111111111 2.315\n",
      "48° 50′ 29″ nord, 2° 18′ 27″ est 48.84138888888889 2.3074999999999997\n",
      "48° 51′ 28″ nord, 2° 22′ 48″ est 48.85777777777778 2.38\n",
      "48° 53′ 03″ nord, 2° 18′ 13″ est 48.884166666666665 2.303611111111111\n"
     ]
    }
   ],
   "source": [
    "latitude = []\n",
    "longitude = []\n",
    "\n",
    "sock = urllib.request.urlopen('https://fr.wikipedia.org/wiki/Liste_des_stations_du_m%C3%A9tro_de_Paris').read() \n",
    "page=bs4.BeautifulSoup(sock)\n",
    "\n",
    "liste_stations = page.find('table').findAll('tr')\n",
    "\n",
    "for station in liste_stations[1:] :\n",
    "    \n",
    "    url_station = \"http://fr.wikipedia.org\"+station.find('a').get('href')\n",
    "    \n",
    "    search = urllib.request.urlopen(url_station).read()\n",
    "    search_station=bs4.BeautifulSoup(search)\n",
    "    \n",
    "    coord = search_station.find('a',{'class': \"mw-kartographer-maplink\"}).text\n",
    "    lat,lng = dms_to_dd(coord)\n",
    "    latitude.append(lat)\n",
    "    longitude.append(lng)\n",
    "\n",
    "stations_metro = gpd.GeoDataFrame(geometry=gpd.points_from_xy(longitude, latitude))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On récupère ensuite une base de données de la mairie de Paris contenant la liste de ses quartiers administratifs et leur représentation graphique :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "quartiers_bruts = gpd.read_file('https://parisdata.opendatasoft.com/explore/dataset/quartier_paris/download/?format=geojson&timezone=Europe/Berlin&lang=fr')\n",
    "quartiers = quartiers_bruts[['l_qu','c_qu','geometry']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>l_qu</th>\n",
       "      <th>c_qu</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>15</td>\n",
       "      <td>POLYGON ((2.36851 48.85573, 2.36900 48.85374, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jardin-des-Plantes</td>\n",
       "      <td>18</td>\n",
       "      <td>POLYGON ((2.36456 48.84366, 2.36450 48.84358, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Porte-Saint-Martin</td>\n",
       "      <td>39</td>\n",
       "      <td>POLYGON ((2.36392 48.86754, 2.36383 48.86750, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Roquette</td>\n",
       "      <td>43</td>\n",
       "      <td>POLYGON ((2.37972 48.85344, 2.37937 48.85339, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Picpus</td>\n",
       "      <td>46</td>\n",
       "      <td>POLYGON ((2.41125 48.82966, 2.41195 48.82934, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 l_qu  c_qu                                           geometry\n",
       "0             Arsenal    15  POLYGON ((2.36851 48.85573, 2.36900 48.85374, ...\n",
       "1  Jardin-des-Plantes    18  POLYGON ((2.36456 48.84366, 2.36450 48.84358, ...\n",
       "2  Porte-Saint-Martin    39  POLYGON ((2.36392 48.86754, 2.36383 48.86750, ...\n",
       "3            Roquette    43  POLYGON ((2.37972 48.85344, 2.37937 48.85339, ...\n",
       "4              Picpus    46  POLYGON ((2.41125 48.82966, 2.41195 48.82934, ..."
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quartiers.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "axi = stations_metro.plot(figsize = (10,10), color = 'red', alpha = 0.4, zorder=2)\n",
    "quartiers.plot(ax = axi, zorder=1, edgecolor = \"black\", facecolor=\"none\",\n",
    "                                                           color = None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On associe ensuite à chaque station de métro le quartier auquel elle appartient :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\blasc\\Anaconda3\\lib\\site-packages\\geopandas\\tools\\sjoin.py:58: UserWarning: CRS of frames being joined does not match!(None != {'init': 'epsg:4326'})\n",
      "  warn(\n"
     ]
    }
   ],
   "source": [
    "stations_metro_quartiers = gpd.sjoin(stations_metro, quartiers, op='within')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geometry</th>\n",
       "      <th>index_right</th>\n",
       "      <th>l_qu</th>\n",
       "      <th>c_qu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>POINT (2.33861 48.88444)</td>\n",
       "      <td>34</td>\n",
       "      <td>Clignancourt</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>POINT (2.34472 48.88306)</td>\n",
       "      <td>34</td>\n",
       "      <td>Clignancourt</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>POINT (2.34944 48.88667)</td>\n",
       "      <td>34</td>\n",
       "      <td>Clignancourt</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>POINT (2.34472 48.89250)</td>\n",
       "      <td>34</td>\n",
       "      <td>Clignancourt</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>POINT (2.35000 48.89028)</td>\n",
       "      <td>34</td>\n",
       "      <td>Clignancourt</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     geometry  index_right          l_qu  c_qu\n",
       "0    POINT (2.33861 48.88444)           34  Clignancourt    70\n",
       "5    POINT (2.34472 48.88306)           34  Clignancourt    70\n",
       "53   POINT (2.34944 48.88667)           34  Clignancourt    70\n",
       "122  POINT (2.34472 48.89250)           34  Clignancourt    70\n",
       "164  POINT (2.35000 48.89028)           34  Clignancourt    70"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stations_metro_quartiers.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Il ne reste plus qu'à compter le nombre de stations de métro par quartier, et à l'ajouter aux données."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>l_qu</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c_qu</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      l_qu\n",
       "c_qu      \n",
       "1        2\n",
       "2        2\n",
       "3        2\n",
       "4        1\n",
       "5        2"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decompte = stations_metro_quartiers.groupby('c_qu')[['l_qu']].count()\n",
    "decompte.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "donnees_augmentees = donnees.join(decompte, on='id_quartier')\n",
    "donnees_augmentees.rename(columns={'l_qu': 'metro'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nom_quartier</th>\n",
       "      <th>id_quartier</th>\n",
       "      <th>ref</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>epoque</th>\n",
       "      <th>meuble_txt</th>\n",
       "      <th>piece</th>\n",
       "      <th>geometry</th>\n",
       "      <th>metro</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Belleville</td>\n",
       "      <td>77</td>\n",
       "      <td>25.0</td>\n",
       "      <td>17.50</td>\n",
       "      <td>30.00</td>\n",
       "      <td>1946-1970</td>\n",
       "      <td>meublé</td>\n",
       "      <td>2</td>\n",
       "      <td>POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Belleville</td>\n",
       "      <td>77</td>\n",
       "      <td>23.6</td>\n",
       "      <td>16.52</td>\n",
       "      <td>28.32</td>\n",
       "      <td>Apres 1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>3</td>\n",
       "      <td>POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Combat</td>\n",
       "      <td>76</td>\n",
       "      <td>19.8</td>\n",
       "      <td>13.86</td>\n",
       "      <td>23.76</td>\n",
       "      <td>1971-1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>4</td>\n",
       "      <td>POLYGON ((2.38834 48.88057, 2.38950 48.87955, ...</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Amérique</td>\n",
       "      <td>75</td>\n",
       "      <td>21.6</td>\n",
       "      <td>15.12</td>\n",
       "      <td>25.92</td>\n",
       "      <td>1946-1970</td>\n",
       "      <td>meublé</td>\n",
       "      <td>2</td>\n",
       "      <td>POLYGON ((2.40940 48.88019, 2.40995 48.87952, ...</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Saint-Fargeau</td>\n",
       "      <td>78</td>\n",
       "      <td>24.0</td>\n",
       "      <td>16.80</td>\n",
       "      <td>28.80</td>\n",
       "      <td>1971-1990</td>\n",
       "      <td>meublé</td>\n",
       "      <td>1</td>\n",
       "      <td>POLYGON ((2.41381 48.87081, 2.41383 48.87066, ...</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    nom_quartier  id_quartier   ref    min    max      epoque meuble_txt  \\\n",
       "0     Belleville           77  25.0  17.50  30.00   1946-1970     meublé   \n",
       "1     Belleville           77  23.6  16.52  28.32  Apres 1990     meublé   \n",
       "2         Combat           76  19.8  13.86  23.76   1971-1990     meublé   \n",
       "3       Amérique           75  21.6  15.12  25.92   1946-1970     meublé   \n",
       "4  Saint-Fargeau           78  24.0  16.80  28.80   1971-1990     meublé   \n",
       "\n",
       "   piece                                           geometry  metro  \n",
       "0      2  POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...    1.0  \n",
       "1      3  POLYGON ((2.38323 48.86710, 2.38314 48.86708, ...    1.0  \n",
       "2      4  POLYGON ((2.38834 48.88057, 2.38950 48.87955, ...    3.0  \n",
       "3      2  POLYGON ((2.40940 48.88019, 2.40995 48.87952, ...    7.0  \n",
       "4      1  POLYGON ((2.41381 48.87081, 2.41383 48.87066, ...    3.0  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "donnees_augmentees.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}